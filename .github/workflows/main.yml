name: Build and deploy to PROD
on:
    push:
        branches:
            - main
permissions:
    id-token: write
    contents: read
env:
    AZURE_WEBAPP_NAME: mimosonk
    AZURE_WEBAPP_PACKAGE_PATH: CarWash.PWA\publish
    AZURE_FUNCTIONS_NAME: func-carwash-mimosonk-prod
    AZURE_FUNCTIONS_PACKAGE_PATH: CarWash.Functions\output
    AZURE_RESOURCE_GROUP: rg-carwash-mimosonk-prod
    AZURE_APPCONFIG_NAME: appcs-carwash-mimosonk-prod
    AZURE_APPCONFIG_ENDPOINT: https://appcs-carwash-mimosonk-prod.azconfig.io
    AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.mimosonk_E838 }}
    AZURE_FUNCTIONS_PUBLISH_PROFILE: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_9E8EB567DBA94EEFBA63CFD8C9B84482 }}
    AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
    AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    CLOUDFLARE_PURGE_URLS: '["https://mimosonk.hu/", "https://mimosonk.hu/sw.js", "https://mimosonk.hu/api/.well-known/configuration", "https://www.mimosonk.hu/", "https://www.mimosonk.hu/sw.js", "https://www.mimosonk.hu/api/.well-known/configuration"]'
    CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
    CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
    CONFIGURATION: Release
    DOTNET_VERSION: 8.0.x
    WORKING_DIRECTORY_PWA: CarWash.PWA
    WORKING_DIRECTORY_FUNCTIONS: CarWash.Functions
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
jobs:
    build-web:
        runs-on: windows-latest
        outputs:
            build_number: ${{ steps.build_number.outputs.VERSION }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Setup .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}
            - name: .NET Tool Restore
              run: dotnet tool restore
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: 17
                  distribution: "zulu"
            - name: Cache SonarQube Cloud packages
              uses: actions/cache@v4
              with:
                  path: ~\sonar\cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
            - name: Cache SonarQube Cloud scanner
              id: cache-sonar-scanner
              uses: actions/cache@v4
              with:
                  path: .\.sonar\scanner
                  key: ${{ runner.os }}-sonar-scanner
                  restore-keys: ${{ runner.os }}-sonar-scanner
            - name: Install SonarQube Cloud scanner
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              shell: powershell
              run: |
                  New-Item -Path .\.sonar\scanner -ItemType Directory
                  dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
            - name: Read version number from package.json
              id: build_number
              run: echo "VERSION=$(cat ${{ env.WORKING_DIRECTORY_PWA }}/ClientApp/package.json | jq '.version')" >> $env:GITHUB_OUTPUT
            - name: Create .env file with build number
              run: echo "REACT_APP_BUILD_NUMBER=${{ steps.build_number.outputs.VERSION }}" > ${{ env.WORKING_DIRECTORY_PWA }}/.env
            - name: Restore
              run: dotnet restore "${{ env.WORKING_DIRECTORY_PWA }}"
            - name: Build and analyze
              shell: powershell
              run: |
                  .\.sonar\scanner\dotnet-sonarscanner begin /k:"mark-szabo_carwash" /o:"mark-szabo-github" /d:sonar.token="${{ env.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
                  dotnet build "${{ env.WORKING_DIRECTORY_PWA }}" --configuration ${{ env.CONFIGURATION }} --no-restore
                  dotnet dotnet-coverage collect "dotnet test CarWash.PWA.Tests" -f xml -o "coverage.xml"
                  .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
            - name: Test
              run: dotnet test "CarWash.PWA.Tests"
            - name: Publish
              run: dotnet publish "${{ env.WORKING_DIRECTORY_PWA }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
            - name: Publish Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: webapp
                  path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    deploy-web:
        runs-on: windows-latest
        needs: build-web
        steps:
            - name: Download artifact from build job
              uses: actions/download-artifact@v4
              with:
                  name: webapp
                  path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
            - name: Deploy to Azure WebApp
              uses: azure/webapps-deploy@v2
              with:
                  app-name: ${{ env.AZURE_WEBAPP_NAME }}
                  publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}
                  package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
            - name: Azure service principal login
              uses: azure/login@v2
              with:
                  client-id: ${{ env.AZURE_CLIENT_ID }}
                  tenant-id: ${{ env.AZURE_TENANT_ID }}
                  subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
            - name: Update app configuration VERSION
              run: |
                  az appconfig kv set `
                  --name ${{ env.AZURE_APPCONFIG_NAME }} `
                  --endpoint ${{ env.AZURE_APPCONFIG_ENDPOINT }} `
                  --auth-mode login `
                  --key VERSION `
                  --value ${{ needs.build-web.outputs.build_number }} `
                  --yes
            - name: Purge Cloudflare Cache
              uses: aorfanos/cloudflare-purge-action@6ea4c10def01482f8a214c8e527a40918844345e
              env:
                  CF_ZONE_NAME: ${{ env.CLOUDFLARE_ZONE }}
                  CF_TOKEN: ${{ env.CLOUDFLARE_TOKEN }}
                  CF_PURGE_URLS: ${{ env.CLOUDFLARE_PURGE_URLS }}
            - name: Azure service principal logout
              run: az logout
    build-and-deploy-functions:
        runs-on: windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
              uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}
            - name: .NET Tool Restore
              run: dotnet tool restore
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: 17
                  distribution: "zulu"
            - name: Cache SonarQube Cloud packages
              uses: actions/cache@v4
              with:
                  path: ~\sonar\cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
            - name: Cache SonarQube Cloud scanner
              id: cache-sonar-scanner
              uses: actions/cache@v4
              with:
                  path: .\.sonar\scanner
                  key: ${{ runner.os }}-sonar-scanner
                  restore-keys: ${{ runner.os }}-sonar-scanner
            - name: Install SonarQube Cloud scanner
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              shell: powershell
              run: |
                  New-Item -Path .\.sonar\scanner -ItemType Directory
                  dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
            - name: Restore Functions
              run: dotnet restore "${{ env.WORKING_DIRECTORY_FUNCTIONS }}"
            - name: Build and analyze
              shell: powershell
              run: |
                  .\.sonar\scanner\dotnet-sonarscanner begin /k:"mark-szabo_carwash" /o:"mark-szabo-github" /d:sonar.token="${{ env.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
                  dotnet build "${{ env.WORKING_DIRECTORY_FUNCTIONS }}" --configuration ${{ env.CONFIGURATION }} --no-restore --output ${{ env.AZURE_FUNCTIONS_PACKAGE_PATH }}
                  .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
            - name: "Run Azure Functions Action"
              uses: Azure/functions-action@v1
              id: fa
              with:
                  app-name: ${{ env.AZURE_FUNCTIONS_NAME }}
                  slot-name: "Production"
                  package: ${{ env.AZURE_FUNCTIONS_PACKAGE_PATH }}
                  publish-profile: ${{ env.AZURE_FUNCTIONS_PUBLISH_PROFILE }}
